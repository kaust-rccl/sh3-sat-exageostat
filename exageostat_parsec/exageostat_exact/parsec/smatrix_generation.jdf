extern "C" %{
/*
 * Copyright (c) 2017-2018 The Universiy of Tennessee and The Universiy
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 */

#include "mix_precision_internal.h"

%}

descA                [ type = "parsec_tiled_matrix_dc_t *" ]
l1                   [ type = "void *" ]
l2                   [ type = "void *" ]
theta                [ type = "double *" ]
dm                   [ type = "char *" ]
c_fun                [ type = "char *" ]
band_size_double     [ type = "int" ]


Allocate(m, n)

n = 0 .. descA->lnt-1
m = %{ return ((descA->m == descA->n)? n: 0); %} .. descA->lmt-1

: descA(m, n)

RW A <- descA(m, n)         [ type = FL ]
     -> descA(m, n)         [ type = FL ]

BODY
{
	int tempmm = (m == descA->lmt-1) ? parsec_imin(descA->mb, descA->lm-(descA->lmt-1)*descA->mb): descA->mb;
	int tempnn = (n == descA->lnt-1) ? parsec_imin(descA->nb, descA->ln-(descA->lnt-1)*descA->nb): descA->nb;
	int m0 = m * descA->mb;
	int n0 = n * descA->nb;
        int distance_metric = (strcmp(dm, "gc") == 0)? 1: 0;
        int covariance_fun = (strcmp(c_fun, "pow-exp") == 0)? 1 : 0;

	//this_task->data._f_A.data_out = parsec_data_copy_new(data_of_descA(m, n), 0);
	//this_task->data._f_A.data_out->device_private = calloc(descA->bsiz, sizeof(float));

	if(covariance_fun == 0) {
		core_scmg(A, tempmm, tempnn, m0, n0, (location *)l1, (location *)l2, theta, distance_metric);
        } else if(covariance_fun == 1) {
                core_scmg_pow_exp(A, tempmm, tempnn, m0, n0, (location *)l1, (location *)l2, theta, distance_metric);
        }
}
END

extern "C" %{

/**
 * @param [in] dcA:    the data, already distributed and allocated
 * @return the parsec object to schedule.
 */
parsec_taskpool_t*
parsec_smatrix_generation_New(parsec_tiled_matrix_dc_t *dcA, location *l1, location *l2, 
                             double *theta , char *dm, char *c_fun, int band_size_double) 
{
    parsec_taskpool_t* smatrix_generation_taskpool;
    parsec_smatrix_generation_taskpool_t* taskpool = NULL;

    taskpool = parsec_smatrix_generation_new(dcA, l1, l2, theta, dm, c_fun, band_size_double);
    smatrix_generation_taskpool = (parsec_taskpool_t*)taskpool;

    parsec_matrix_add2arena(taskpool->arenas[PARSEC_smatrix_generation_FL_ARENA],
                            parsec_datatype_float_t, matrix_UpperLower,
                            1, dcA->mb, dcA->nb, dcA->mb,
                            PARSEC_ARENA_ALIGNMENT_SSE, -1 );

    return smatrix_generation_taskpool;
}

/**
 * @param [inout] the parsec object to destroy
*/
void parsec_smatrix_generation_Destruct(parsec_taskpool_t *taskpool)
{
    parsec_smatrix_generation_taskpool_t *smatrix_generation_taskpool = (parsec_smatrix_generation_taskpool_t *)taskpool;
    parsec_matrix_del2arena(smatrix_generation_taskpool->arenas[PARSEC_smatrix_generation_FL_ARENA]);
    parsec_taskpool_free(taskpool);
}

/**
 * @brief allocate and generate dcA
 * 
 * @param [inout] dcA: the data, already distributed and allocated
 */
int parsec_smatrix_generation(parsec_context_t *parsec,
                         parsec_tiled_matrix_dc_t *dcA, location *l1, location *l2,
                         double *theta , char *dm, char *c_fun, int band_size_double)
{
    parsec_taskpool_t *parsec_smatrix_generation = NULL;

    parsec_smatrix_generation = parsec_smatrix_generation_New( 
                               dcA, l1, l2, theta, dm, c_fun, band_size_double); 

    if( parsec_smatrix_generation != NULL ){
        parsec_context_add_taskpool(parsec, parsec_smatrix_generation);
        parsec_context_start(parsec);
        parsec_context_wait(parsec);
        parsec_smatrix_generation_Destruct(parsec_smatrix_generation);
    }

    return 0;
}

%}
