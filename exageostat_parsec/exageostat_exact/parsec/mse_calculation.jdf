extern "C" %{
/*
 * Copyright (c) 2017-2018 The Universiy of Tennessee and The Universiy
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 */

#include "mix_precision_internal.h"

%}

descZpre                [ type = "parsec_tiled_matrix_dc_t *" ]
descZmiss               [ type = "parsec_tiled_matrix_dc_t *" aligned = descZpre ]
descZerror              [ type = "parsec_tiled_matrix_dc_t *" ]


Read(m)

m = 0 .. descZpre->lmt-1

: descZpre(m, 0)

READ Zpre  <- descZpre(m, 0)      [ type = DB ]
READ Zmiss <- descZmiss(m, 0)     [ type = DB ]

WRITE local_mse <- NEW
                -> local_mse Task(m) 

BODY
{
	/* Initialize to 0.0 */
        *((double *)local_mse) = 0.0;

        int tempmm = (m == descZpre->lmt-1) ? parsec_imin(descZpre->mb, descZpre->m-m*descZpre->mb): descZpre->mb;
        for(int i = 0; i < tempmm; i++)
        {
                 *((double *)local_mse) += pow( (((double *)Zpre)[i]-((double *)Zmiss)[i]), 2 );
        }

}
END


Task(m)

m = 0 .. descZpre->lmt-1

: descZerror(0, 0)

READ local_mse <- local_mse Read(m) 

RW Zerror <- descZerror(0, 0)           
          -> descZerror(0, 0)          

CTL ctl1 -> (m != descZpre->lmt-1)? ctl2 Task(m+1)
CTL ctl2 <- (m != 0)? ctl1 Task(m-1)

BODY
{
	/* Initialize to 0.0 */
	if( 0 == m )
		*((double *)Zerror) = 0.0;

	/* Updata value */
	*((double *)Zerror) += *((double *)local_mse); 
}
END


extern "C" %{

/**
 * @param [in] dcA:    the data, already distributed and allocated
 * @return the parsec object to schedule.
 */
parsec_taskpool_t*
parsec_mse_calculation_New(parsec_tiled_matrix_dc_t *dcZpre,
		parsec_tiled_matrix_dc_t *dcZmiss,
		parsec_tiled_matrix_dc_t *dcZerror) 
{
    parsec_mse_calculation_taskpool_t* taskpool = NULL;

    taskpool = parsec_mse_calculation_new(dcZpre, dcZmiss, dcZerror); 

    parsec_matrix_add2arena(taskpool->arenas[PARSEC_mse_calculation_DB_ARENA],
                            parsec_datatype_double_t, matrix_UpperLower,
                            1, dcZpre->mb, 1, dcZpre->mb,
                            PARSEC_ARENA_ALIGNMENT_SSE, -1 );

    parsec_matrix_add2arena(taskpool->arenas[PARSEC_mse_calculation_DEFAULT_ARENA],
                            parsec_datatype_double_t, matrix_UpperLower,
                            1, 1, 1, 1,
                            PARSEC_ARENA_ALIGNMENT_SSE, -1 );

    return (parsec_taskpool_t*)taskpool;
}

/**
 * @param [inout] the parsec object to destroy
*/
void parsec_mse_calculation_Destruct(parsec_taskpool_t *taskpool)
{
    parsec_mse_calculation_taskpool_t *mse_calculation_taskpool = (parsec_mse_calculation_taskpool_t *)taskpool;
    parsec_matrix_del2arena(mse_calculation_taskpool->arenas[PARSEC_mse_calculation_DEFAULT_ARENA]);
    parsec_matrix_del2arena(mse_calculation_taskpool->arenas[PARSEC_mse_calculation_DB_ARENA]);
    parsec_taskpool_free(taskpool);
}

/**
 * @brief allocate and generate dcA
 * 
 * @param [inout] dcA: the data, already distributed and allocated
 */
int parsec_mse_calculation(parsec_context_t *parsec,
                       parsec_tiled_matrix_dc_t *dcZpre,
                       parsec_tiled_matrix_dc_t *dcZmiss,
		       parsec_tiled_matrix_dc_t *dcZerror)
{
    parsec_taskpool_t *parsec_mse_calculation = NULL;

    parsec_mse_calculation = parsec_mse_calculation_New(dcZpre, dcZmiss, dcZerror); 

    if( parsec_mse_calculation != NULL ){
        parsec_context_add_taskpool(parsec, parsec_mse_calculation);
        parsec_context_start(parsec);
        parsec_context_wait(parsec);
        parsec_mse_calculation_Destruct(parsec_mse_calculation);
    }

    return 0;
}

%}
