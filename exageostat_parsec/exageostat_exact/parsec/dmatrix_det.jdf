extern "C" %{
/*
 * Copyright (c) 2017-2018 The Universiy of Tennessee and The Universiy
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 */

#include "mix_precision_internal.h"

static double parsec_core_dmdet (double *A, int m, int lda) {
        double res = 0.0;
        for (int i = 0; i < m; i++) {
                if(A[i + i * lda] > 0)
                        res += log(A[i + i * lda]);
        }

        return res;
}

%}

descA                [ type = "parsec_tiled_matrix_dc_t *" ]
descdet              [ type = "parsec_tiled_matrix_dc_t *" ]

Read(m)

m = 0 .. descA->lmt-1

: descA(m, m)

READ A <- descA(m, m)            [ type = DB ]

WRITE D <- NEW
        -> D0 Determinant(m)

BODY
{
	int tempmm = (m == descA->lmt-1) ? parsec_imin(descA->mb, descA->m-(descA->lmt-1)*descA->mb): descA->mb;
        *((double *)D) = parsec_core_dmdet(A, tempmm, descA->mb);
}
END

Determinant(m)

m = 0 .. descA->lmt-1

: descdet(0, 0)

READ D0 <- D Read(m) 

RW D <- descdet(0, 0)
     -> descdet(0, 0)

CTL ctl1 -> (m != descA->lmt-1)? ctl2 Determinant(m+1)
CTL ctl2 <- (m != 0)? ctl1 Determinant(m-1)

BODY
{
	/* Init data */
	if( 0 == m ) {
		*((double *)D) = 0.0;
	}

	/* Update */
	*((double *)D) +=  *((double *)D0); 
}
END


extern "C" %{

/**
 * @param [in] dcA:    the data, already distributed and allocated
 * @return the parsec object to schedule.
 */
parsec_taskpool_t*
parsec_dmatrix_det_New(parsec_tiled_matrix_dc_t *dcA, parsec_tiled_matrix_dc_t *dcdet) 
{
    parsec_taskpool_t* dmatrix_det_taskpool;
    parsec_dmatrix_det_taskpool_t* taskpool = NULL;

    taskpool = parsec_dmatrix_det_new(dcA, dcdet); 
    dmatrix_det_taskpool = (parsec_taskpool_t*)taskpool;

    parsec_matrix_add2arena(taskpool->arenas[PARSEC_dmatrix_det_DEFAULT_ARENA],
                            parsec_datatype_double_t, matrix_UpperLower,
                            1, 1, 1, 1,
                            PARSEC_ARENA_ALIGNMENT_SSE, -1 );

    parsec_matrix_add2arena(taskpool->arenas[PARSEC_dmatrix_det_DB_ARENA],
                            parsec_datatype_double_t, matrix_UpperLower,
                            1, dcA->mb, dcA->nb, dcA->mb,
                            PARSEC_ARENA_ALIGNMENT_SSE, -1 );

    return dmatrix_det_taskpool;
}

/**
 * @param [inout] the parsec object to destroy
*/
void parsec_dmatrix_det_Destruct(parsec_taskpool_t *taskpool)
{
    parsec_dmatrix_det_taskpool_t *dmatrix_det_taskpool = (parsec_dmatrix_det_taskpool_t *)taskpool;
    parsec_matrix_del2arena(dmatrix_det_taskpool->arenas[PARSEC_dmatrix_det_DB_ARENA]);
    parsec_taskpool_free(taskpool);
}

/**
 * @brief allocate and generate dcA
 * 
 * @param [inout] dcA: the data, already distributed and allocated
 */
int parsec_dmatrix_det(parsec_context_t *parsec,
                       parsec_tiled_matrix_dc_t *dcA,
                       parsec_tiled_matrix_dc_t *dcdet)
{
    parsec_taskpool_t *parsec_dmatrix_det = NULL;

    parsec_dmatrix_det = parsec_dmatrix_det_New(dcA, dcdet); 

    if( parsec_dmatrix_det != NULL ){
        parsec_context_add_taskpool(parsec, parsec_dmatrix_det);
        parsec_context_start(parsec);
        parsec_context_wait(parsec);
        parsec_dmatrix_det_Destruct(parsec_dmatrix_det);
    }

    return 0;
}

%}
