# vim: set filetype=sh :
#
# This file is for a cross-compilation. 
#   configure --with-platform=xcompile.knl.example ...
#
# PaRSEC will be compiled on the head node, disarming the --host
# for the toolchain. All dependencies have to be compiled for the
# expected target architecture (${host}).
#

# $host and $arch set from --host option
# If host not set, set it
: ${host:=knl-Linux}
: ${arch:=${host%%-*}} # get the first piece
: ${system:=${host#*-}} # get all the rest

# First, compute node options (cross-compilation)
cat <<_EOF
#################################################
# Platform $with_platform
# Set preferences and dependencies for the
# cross-compiled (compute) executables and libs
#   Adding -march=$arch
#
_EOF

with_blas=Intel10_64lp_seq
with_cuda=no
with_hwloc=${HWLOC_ROOT:-$HOME/parsec/$with_platform/hwloc} # add some guesswork location
ENVVARS+=" CFLAGS+=\ -march=$arch"

# Generate the cross-compiling toolchain file
TOOLCHAIN_FILE=$PWD/Toolchain-$with_platform.cmake
cat << _EOF > $TOOLCHAIN_FILE
# Toolchain file for $with_platform
# Warning! This file is generated !
#   Editions will be overwritten by invoking configure
# Set crosscompiling mode
SET(CMAKE_SYSTEM_NAME ${system})
SET(CMAKE_SYSTEM_PROCESSOR ${arch})
# Force try_run outcomes
SET( PARSEC_ATOMIC_USE_GCC_32_BUILTINS_EXITCODE
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)
SET( PARSEC_ATOMIC_USE_GCC_64_BUILTINS_EXITCODE
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)
SET( PARSEC_ATOMIC_USE_GCC_128_BUILTINS_EXITCODE
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)
_EOF


# Second, deal with the native (headnode) tools
cat <<_EOF
#################################################
# Platform $with_platform
# Set preferences and dependencies for the
# native (headnode) executables
_EOF

# Variables controlling the native tools build
# : ${NATIVE_DIR:=$PWD/native} # Change if you want to override the default
: ${NATIVE_CC:=gcc}
: ${NATIVE_CFLAGS:=}
: ${NATIVE_CXX:=g++}
: ${NATIVE_CXXFLAGS:=}
: ${NATIVE_LDFLAGS:=}

# Pass-in the toolchain file name in $1,
# and arbitrary options to send to the native cmake invocation thereafter
configure_native_toolchain "$TOOLCHAIN_FILE" # "-DSUPPORT_CXX=OFF"
#build_native_toolchain

# Done with the toolchain for the headnode
# Let's have configure do the rest as usual now
